// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: companies.proto

package src

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompaniesClient is the client API for Companies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompaniesClient interface {
	InviteDriver(ctx context.Context, in *InviteDriverRequest, opts ...grpc.CallOption) (*InviteDriverResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoResponse, error)
	RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error)
	// AddDriver call is not needed, because it will happen after email acceptation
	GetDrivers(ctx context.Context, in *GetDriversRequest, opts ...grpc.CallOption) (*GetDriversResponse, error)
	RemoveDriver(ctx context.Context, in *RemoveDriverRequest, opts ...grpc.CallOption) (*RemoveDriverResponse, error)
}

type companiesClient struct {
	cc grpc.ClientConnInterface
}

func NewCompaniesClient(cc grpc.ClientConnInterface) CompaniesClient {
	return &companiesClient{cc}
}

func (c *companiesClient) InviteDriver(ctx context.Context, in *InviteDriverRequest, opts ...grpc.CallOption) (*InviteDriverResponse, error) {
	out := new(InviteDriverResponse)
	err := c.cc.Invoke(ctx, "/rides.Companies/InviteDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/rides.Companies/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesClient) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoResponse, error) {
	out := new(UpdateInfoResponse)
	err := c.cc.Invoke(ctx, "/rides.Companies/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesClient) RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error) {
	out := new(RegisterCompanyResponse)
	err := c.cc.Invoke(ctx, "/rides.Companies/RegisterCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesClient) GetDrivers(ctx context.Context, in *GetDriversRequest, opts ...grpc.CallOption) (*GetDriversResponse, error) {
	out := new(GetDriversResponse)
	err := c.cc.Invoke(ctx, "/rides.Companies/GetDrivers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesClient) RemoveDriver(ctx context.Context, in *RemoveDriverRequest, opts ...grpc.CallOption) (*RemoveDriverResponse, error) {
	out := new(RemoveDriverResponse)
	err := c.cc.Invoke(ctx, "/rides.Companies/RemoveDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompaniesServer is the server API for Companies service.
// All implementations must embed UnimplementedCompaniesServer
// for forward compatibility
type CompaniesServer interface {
	InviteDriver(context.Context, *InviteDriverRequest) (*InviteDriverResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoResponse, error)
	RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error)
	// AddDriver call is not needed, because it will happen after email acceptation
	GetDrivers(context.Context, *GetDriversRequest) (*GetDriversResponse, error)
	RemoveDriver(context.Context, *RemoveDriverRequest) (*RemoveDriverResponse, error)
	mustEmbedUnimplementedCompaniesServer()
}

// UnimplementedCompaniesServer must be embedded to have forward compatible implementations.
type UnimplementedCompaniesServer struct {
}

func (UnimplementedCompaniesServer) InviteDriver(context.Context, *InviteDriverRequest) (*InviteDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteDriver not implemented")
}
func (UnimplementedCompaniesServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedCompaniesServer) UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedCompaniesServer) RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedCompaniesServer) GetDrivers(context.Context, *GetDriversRequest) (*GetDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrivers not implemented")
}
func (UnimplementedCompaniesServer) RemoveDriver(context.Context, *RemoveDriverRequest) (*RemoveDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDriver not implemented")
}
func (UnimplementedCompaniesServer) mustEmbedUnimplementedCompaniesServer() {}

// UnsafeCompaniesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompaniesServer will
// result in compilation errors.
type UnsafeCompaniesServer interface {
	mustEmbedUnimplementedCompaniesServer()
}

func RegisterCompaniesServer(s grpc.ServiceRegistrar, srv CompaniesServer) {
	s.RegisterService(&Companies_ServiceDesc, srv)
}

func _Companies_InviteDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServer).InviteDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Companies/InviteDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServer).InviteDriver(ctx, req.(*InviteDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Companies_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Companies/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Companies_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Companies/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServer).UpdateInfo(ctx, req.(*UpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Companies_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Companies/RegisterCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServer).RegisterCompany(ctx, req.(*RegisterCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Companies_GetDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServer).GetDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Companies/GetDrivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServer).GetDrivers(ctx, req.(*GetDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Companies_RemoveDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServer).RemoveDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Companies/RemoveDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServer).RemoveDriver(ctx, req.(*RemoveDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Companies_ServiceDesc is the grpc.ServiceDesc for Companies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Companies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rides.Companies",
	HandlerType: (*CompaniesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteDriver",
			Handler:    _Companies_InviteDriver_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Companies_GetInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _Companies_UpdateInfo_Handler,
		},
		{
			MethodName: "RegisterCompany",
			Handler:    _Companies_RegisterCompany_Handler,
		},
		{
			MethodName: "GetDrivers",
			Handler:    _Companies_GetDrivers_Handler,
		},
		{
			MethodName: "RemoveDriver",
			Handler:    _Companies_RemoveDriver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companies.proto",
}
