// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: rides.proto

package src

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RidesClient is the client API for Rides service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RidesClient interface {
	FindRide(ctx context.Context, in *FindRideRequest, opts ...grpc.CallOption) (Rides_FindRideClient, error)
	StartRide(ctx context.Context, in *StartRideRequest, opts ...grpc.CallOption) (*StartRideResponse, error)
	CancelRide(ctx context.Context, in *CancelRideRequest, opts ...grpc.CallOption) (*CancelRideResponse, error)
	EndRide(ctx context.Context, in *EndRideRequest, opts ...grpc.CallOption) (*EndRideResponse, error)
	CreateRide(ctx context.Context, in *CreateRideRequest, opts ...grpc.CallOption) (*CreateRideResponse, error)
}

type ridesClient struct {
	cc grpc.ClientConnInterface
}

func NewRidesClient(cc grpc.ClientConnInterface) RidesClient {
	return &ridesClient{cc}
}

func (c *ridesClient) FindRide(ctx context.Context, in *FindRideRequest, opts ...grpc.CallOption) (Rides_FindRideClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rides_ServiceDesc.Streams[0], "/rides.Rides/FindRide", opts...)
	if err != nil {
		return nil, err
	}
	x := &ridesFindRideClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rides_FindRideClient interface {
	Recv() (*FindRideResponse, error)
	grpc.ClientStream
}

type ridesFindRideClient struct {
	grpc.ClientStream
}

func (x *ridesFindRideClient) Recv() (*FindRideResponse, error) {
	m := new(FindRideResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ridesClient) StartRide(ctx context.Context, in *StartRideRequest, opts ...grpc.CallOption) (*StartRideResponse, error) {
	out := new(StartRideResponse)
	err := c.cc.Invoke(ctx, "/rides.Rides/StartRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ridesClient) CancelRide(ctx context.Context, in *CancelRideRequest, opts ...grpc.CallOption) (*CancelRideResponse, error) {
	out := new(CancelRideResponse)
	err := c.cc.Invoke(ctx, "/rides.Rides/CancelRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ridesClient) EndRide(ctx context.Context, in *EndRideRequest, opts ...grpc.CallOption) (*EndRideResponse, error) {
	out := new(EndRideResponse)
	err := c.cc.Invoke(ctx, "/rides.Rides/EndRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ridesClient) CreateRide(ctx context.Context, in *CreateRideRequest, opts ...grpc.CallOption) (*CreateRideResponse, error) {
	out := new(CreateRideResponse)
	err := c.cc.Invoke(ctx, "/rides.Rides/CreateRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RidesServer is the server API for Rides service.
// All implementations must embed UnimplementedRidesServer
// for forward compatibility
type RidesServer interface {
	FindRide(*FindRideRequest, Rides_FindRideServer) error
	StartRide(context.Context, *StartRideRequest) (*StartRideResponse, error)
	CancelRide(context.Context, *CancelRideRequest) (*CancelRideResponse, error)
	EndRide(context.Context, *EndRideRequest) (*EndRideResponse, error)
	CreateRide(context.Context, *CreateRideRequest) (*CreateRideResponse, error)
	mustEmbedUnimplementedRidesServer()
}

// UnimplementedRidesServer must be embedded to have forward compatible implementations.
type UnimplementedRidesServer struct {
}

func (UnimplementedRidesServer) FindRide(*FindRideRequest, Rides_FindRideServer) error {
	return status.Errorf(codes.Unimplemented, "method FindRide not implemented")
}
func (UnimplementedRidesServer) StartRide(context.Context, *StartRideRequest) (*StartRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRide not implemented")
}
func (UnimplementedRidesServer) CancelRide(context.Context, *CancelRideRequest) (*CancelRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRide not implemented")
}
func (UnimplementedRidesServer) EndRide(context.Context, *EndRideRequest) (*EndRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndRide not implemented")
}
func (UnimplementedRidesServer) CreateRide(context.Context, *CreateRideRequest) (*CreateRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRide not implemented")
}
func (UnimplementedRidesServer) mustEmbedUnimplementedRidesServer() {}

// UnsafeRidesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RidesServer will
// result in compilation errors.
type UnsafeRidesServer interface {
	mustEmbedUnimplementedRidesServer()
}

func RegisterRidesServer(s grpc.ServiceRegistrar, srv RidesServer) {
	s.RegisterService(&Rides_ServiceDesc, srv)
}

func _Rides_FindRide_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RidesServer).FindRide(m, &ridesFindRideServer{stream})
}

type Rides_FindRideServer interface {
	Send(*FindRideResponse) error
	grpc.ServerStream
}

type ridesFindRideServer struct {
	grpc.ServerStream
}

func (x *ridesFindRideServer) Send(m *FindRideResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rides_StartRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidesServer).StartRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Rides/StartRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidesServer).StartRide(ctx, req.(*StartRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rides_CancelRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidesServer).CancelRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Rides/CancelRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidesServer).CancelRide(ctx, req.(*CancelRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rides_EndRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidesServer).EndRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Rides/EndRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidesServer).EndRide(ctx, req.(*EndRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rides_CreateRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidesServer).CreateRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rides.Rides/CreateRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidesServer).CreateRide(ctx, req.(*CreateRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rides_ServiceDesc is the grpc.ServiceDesc for Rides service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rides_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rides.Rides",
	HandlerType: (*RidesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRide",
			Handler:    _Rides_StartRide_Handler,
		},
		{
			MethodName: "CancelRide",
			Handler:    _Rides_CancelRide_Handler,
		},
		{
			MethodName: "EndRide",
			Handler:    _Rides_EndRide_Handler,
		},
		{
			MethodName: "CreateRide",
			Handler:    _Rides_CreateRide_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindRide",
			Handler:       _Rides_FindRide_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rides.proto",
}
